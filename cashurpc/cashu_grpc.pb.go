// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cashu.proto

package cashurpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mint_Keys_FullMethodName           = "/cashu.v1.Mint/Keys"
	Mint_KeySets_FullMethodName        = "/cashu.v1.Mint/KeySets"
	Mint_Swap_FullMethodName           = "/cashu.v1.Mint/Swap"
	Mint_MintQuote_FullMethodName      = "/cashu.v1.Mint/MintQuote"
	Mint_MintQuoteState_FullMethodName = "/cashu.v1.Mint/MintQuoteState"
	Mint_Mint_FullMethodName           = "/cashu.v1.Mint/Mint"
	Mint_MeltQuote_FullMethodName      = "/cashu.v1.Mint/MeltQuote"
	Mint_MeltQuoteState_FullMethodName = "/cashu.v1.Mint/MeltQuoteState"
	Mint_Melt_FullMethodName           = "/cashu.v1.Mint/Melt"
	Mint_Info_FullMethodName           = "/cashu.v1.Mint/Info"
	Mint_CheckState_FullMethodName     = "/cashu.v1.Mint/CheckState"
)

// MintClient is the client API for Mint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MintClient interface {
	// Starting https://github.com/cashubtc/nuts/blob/main/01.md
	Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/02.md
	KeySets(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/03.md
	Swap(ctx context.Context, in *SwapRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MintQuote(ctx context.Context, in *PostMintQuoteRequest, opts ...grpc.CallOption) (*PostMintQuoteResponse, error)
	MintQuoteState(ctx context.Context, in *GetQuoteStateRequest, opts ...grpc.CallOption) (*PostMintQuoteResponse, error)
	Mint(ctx context.Context, in *PostMintRequest, opts ...grpc.CallOption) (*PostMintResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MeltQuote(ctx context.Context, in *PostMeltQuoteRequest, opts ...grpc.CallOption) (*PostMeltQuoteResponse, error)
	MeltQuoteState(ctx context.Context, in *GetQuoteStateRequest, opts ...grpc.CallOption) (*PostMeltQuoteResponse, error)
	Melt(ctx context.Context, in *PostMeltRequest, opts ...grpc.CallOption) (*PostMeltResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/06.md
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/07.md
	CheckState(ctx context.Context, in *PostCheckStateRequest, opts ...grpc.CallOption) (*PostCheckStateResponse, error)
}

type mintClient struct {
	cc grpc.ClientConnInterface
}

func NewMintClient(cc grpc.ClientConnInterface) MintClient {
	return &mintClient{cc}
}

func (c *mintClient) Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, Mint_Keys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) KeySets(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, Mint_KeySets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) Swap(ctx context.Context, in *SwapRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, Mint_Swap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) MintQuote(ctx context.Context, in *PostMintQuoteRequest, opts ...grpc.CallOption) (*PostMintQuoteResponse, error) {
	out := new(PostMintQuoteResponse)
	err := c.cc.Invoke(ctx, Mint_MintQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) MintQuoteState(ctx context.Context, in *GetQuoteStateRequest, opts ...grpc.CallOption) (*PostMintQuoteResponse, error) {
	out := new(PostMintQuoteResponse)
	err := c.cc.Invoke(ctx, Mint_MintQuoteState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) Mint(ctx context.Context, in *PostMintRequest, opts ...grpc.CallOption) (*PostMintResponse, error) {
	out := new(PostMintResponse)
	err := c.cc.Invoke(ctx, Mint_Mint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) MeltQuote(ctx context.Context, in *PostMeltQuoteRequest, opts ...grpc.CallOption) (*PostMeltQuoteResponse, error) {
	out := new(PostMeltQuoteResponse)
	err := c.cc.Invoke(ctx, Mint_MeltQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) MeltQuoteState(ctx context.Context, in *GetQuoteStateRequest, opts ...grpc.CallOption) (*PostMeltQuoteResponse, error) {
	out := new(PostMeltQuoteResponse)
	err := c.cc.Invoke(ctx, Mint_MeltQuoteState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) Melt(ctx context.Context, in *PostMeltRequest, opts ...grpc.CallOption) (*PostMeltResponse, error) {
	out := new(PostMeltResponse)
	err := c.cc.Invoke(ctx, Mint_Melt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Mint_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintClient) CheckState(ctx context.Context, in *PostCheckStateRequest, opts ...grpc.CallOption) (*PostCheckStateResponse, error) {
	out := new(PostCheckStateResponse)
	err := c.cc.Invoke(ctx, Mint_CheckState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MintServer is the server API for Mint service.
// All implementations must embed UnimplementedMintServer
// for forward compatibility
type MintServer interface {
	// Starting https://github.com/cashubtc/nuts/blob/main/01.md
	Keys(context.Context, *KeysRequest) (*KeysResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/02.md
	KeySets(context.Context, *KeysRequest) (*KeysResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/03.md
	Swap(context.Context, *SwapRequest) (*SwapResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MintQuote(context.Context, *PostMintQuoteRequest) (*PostMintQuoteResponse, error)
	MintQuoteState(context.Context, *GetQuoteStateRequest) (*PostMintQuoteResponse, error)
	Mint(context.Context, *PostMintRequest) (*PostMintResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MeltQuote(context.Context, *PostMeltQuoteRequest) (*PostMeltQuoteResponse, error)
	MeltQuoteState(context.Context, *GetQuoteStateRequest) (*PostMeltQuoteResponse, error)
	Melt(context.Context, *PostMeltRequest) (*PostMeltResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/06.md
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Starting https://github.com/cashubtc/nuts/blob/main/07.md
	CheckState(context.Context, *PostCheckStateRequest) (*PostCheckStateResponse, error)
	mustEmbedUnimplementedMintServer()
}

// UnimplementedMintServer must be embedded to have forward compatible implementations.
type UnimplementedMintServer struct {
}

func (UnimplementedMintServer) Keys(context.Context, *KeysRequest) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedMintServer) KeySets(context.Context, *KeysRequest) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySets not implemented")
}
func (UnimplementedMintServer) Swap(context.Context, *SwapRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (UnimplementedMintServer) MintQuote(context.Context, *PostMintQuoteRequest) (*PostMintQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintQuote not implemented")
}
func (UnimplementedMintServer) MintQuoteState(context.Context, *GetQuoteStateRequest) (*PostMintQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintQuoteState not implemented")
}
func (UnimplementedMintServer) Mint(context.Context, *PostMintRequest) (*PostMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (UnimplementedMintServer) MeltQuote(context.Context, *PostMeltQuoteRequest) (*PostMeltQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeltQuote not implemented")
}
func (UnimplementedMintServer) MeltQuoteState(context.Context, *GetQuoteStateRequest) (*PostMeltQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeltQuoteState not implemented")
}
func (UnimplementedMintServer) Melt(context.Context, *PostMeltRequest) (*PostMeltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Melt not implemented")
}
func (UnimplementedMintServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMintServer) CheckState(context.Context, *PostCheckStateRequest) (*PostCheckStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckState not implemented")
}
func (UnimplementedMintServer) mustEmbedUnimplementedMintServer() {}

// UnsafeMintServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MintServer will
// result in compilation errors.
type UnsafeMintServer interface {
	mustEmbedUnimplementedMintServer()
}

func RegisterMintServer(s grpc.ServiceRegistrar, srv MintServer) {
	s.RegisterService(&Mint_ServiceDesc, srv)
}

func _Mint_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_Keys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).Keys(ctx, req.(*KeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_KeySets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).KeySets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_KeySets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).KeySets(ctx, req.(*KeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_Swap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).Swap(ctx, req.(*SwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_MintQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMintQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).MintQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_MintQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).MintQuote(ctx, req.(*PostMintQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_MintQuoteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).MintQuoteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_MintQuoteState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).MintQuoteState(ctx, req.(*GetQuoteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_Mint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).Mint(ctx, req.(*PostMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_MeltQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMeltQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).MeltQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_MeltQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).MeltQuote(ctx, req.(*PostMeltQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_MeltQuoteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).MeltQuoteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_MeltQuoteState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).MeltQuoteState(ctx, req.(*GetQuoteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_Melt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMeltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).Melt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_Melt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).Melt(ctx, req.(*PostMeltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mint_CheckState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCheckStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintServer).CheckState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mint_CheckState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintServer).CheckState(ctx, req.(*PostCheckStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mint_ServiceDesc is the grpc.ServiceDesc for Mint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cashu.v1.Mint",
	HandlerType: (*MintServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keys",
			Handler:    _Mint_Keys_Handler,
		},
		{
			MethodName: "KeySets",
			Handler:    _Mint_KeySets_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Mint_Swap_Handler,
		},
		{
			MethodName: "MintQuote",
			Handler:    _Mint_MintQuote_Handler,
		},
		{
			MethodName: "MintQuoteState",
			Handler:    _Mint_MintQuoteState_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Mint_Mint_Handler,
		},
		{
			MethodName: "MeltQuote",
			Handler:    _Mint_MeltQuote_Handler,
		},
		{
			MethodName: "MeltQuoteState",
			Handler:    _Mint_MeltQuoteState_Handler,
		},
		{
			MethodName: "Melt",
			Handler:    _Mint_Melt_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Mint_Info_Handler,
		},
		{
			MethodName: "CheckState",
			Handler:    _Mint_CheckState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cashu.proto",
}
