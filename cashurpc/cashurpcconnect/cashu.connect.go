// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cashu.proto

package cashurpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	cashurpc "github.com/elnosh/gonuts/cashurpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MintName is the fully-qualified name of the Mint service.
	MintName = "cashu.v1.Mint"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MintKeysProcedure is the fully-qualified name of the Mint's Keys RPC.
	MintKeysProcedure = "/cashu.v1.Mint/Keys"
	// MintKeySetsProcedure is the fully-qualified name of the Mint's KeySets RPC.
	MintKeySetsProcedure = "/cashu.v1.Mint/KeySets"
	// MintSwapProcedure is the fully-qualified name of the Mint's Swap RPC.
	MintSwapProcedure = "/cashu.v1.Mint/Swap"
	// MintMintQuoteProcedure is the fully-qualified name of the Mint's MintQuote RPC.
	MintMintQuoteProcedure = "/cashu.v1.Mint/MintQuote"
	// MintMintQuoteStateProcedure is the fully-qualified name of the Mint's MintQuoteState RPC.
	MintMintQuoteStateProcedure = "/cashu.v1.Mint/MintQuoteState"
	// MintMintProcedure is the fully-qualified name of the Mint's Mint RPC.
	MintMintProcedure = "/cashu.v1.Mint/Mint"
	// MintMeltQuoteProcedure is the fully-qualified name of the Mint's MeltQuote RPC.
	MintMeltQuoteProcedure = "/cashu.v1.Mint/MeltQuote"
	// MintMeltQuoteStateProcedure is the fully-qualified name of the Mint's MeltQuoteState RPC.
	MintMeltQuoteStateProcedure = "/cashu.v1.Mint/MeltQuoteState"
	// MintMeltProcedure is the fully-qualified name of the Mint's Melt RPC.
	MintMeltProcedure = "/cashu.v1.Mint/Melt"
	// MintInfoProcedure is the fully-qualified name of the Mint's Info RPC.
	MintInfoProcedure = "/cashu.v1.Mint/Info"
	// MintCheckStateProcedure is the fully-qualified name of the Mint's CheckState RPC.
	MintCheckStateProcedure = "/cashu.v1.Mint/CheckState"
)

// MintClient is a client for the cashu.v1.Mint service.
type MintClient interface {
	// Starting https://github.com/cashubtc/nuts/blob/main/01.md
	Keys(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/02.md
	KeySets(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/03.md
	Swap(context.Context, *connect_go.Request[cashurpc.SwapRequest]) (*connect_go.Response[cashurpc.SwapResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MintQuote(context.Context, *connect_go.Request[cashurpc.PostMintQuoteRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error)
	MintQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error)
	Mint(context.Context, *connect_go.Request[cashurpc.PostMintRequest]) (*connect_go.Response[cashurpc.PostMintResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MeltQuote(context.Context, *connect_go.Request[cashurpc.PostMeltQuoteRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error)
	MeltQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error)
	Melt(context.Context, *connect_go.Request[cashurpc.PostMeltRequest]) (*connect_go.Response[cashurpc.PostMeltResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/06.md
	Info(context.Context, *connect_go.Request[cashurpc.InfoRequest]) (*connect_go.Response[cashurpc.InfoResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/07.md
	CheckState(context.Context, *connect_go.Request[cashurpc.PostCheckStateRequest]) (*connect_go.Response[cashurpc.PostCheckStateResponse], error)
}

// NewMintClient constructs a client for the cashu.v1.Mint service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMintClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MintClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mintClient{
		keys: connect_go.NewClient[cashurpc.KeysRequest, cashurpc.KeysResponse](
			httpClient,
			baseURL+MintKeysProcedure,
			opts...,
		),
		keySets: connect_go.NewClient[cashurpc.KeysRequest, cashurpc.KeysResponse](
			httpClient,
			baseURL+MintKeySetsProcedure,
			opts...,
		),
		swap: connect_go.NewClient[cashurpc.SwapRequest, cashurpc.SwapResponse](
			httpClient,
			baseURL+MintSwapProcedure,
			opts...,
		),
		mintQuote: connect_go.NewClient[cashurpc.PostMintQuoteRequest, cashurpc.PostMintQuoteResponse](
			httpClient,
			baseURL+MintMintQuoteProcedure,
			opts...,
		),
		mintQuoteState: connect_go.NewClient[cashurpc.GetQuoteStateRequest, cashurpc.PostMintQuoteResponse](
			httpClient,
			baseURL+MintMintQuoteStateProcedure,
			opts...,
		),
		mint: connect_go.NewClient[cashurpc.PostMintRequest, cashurpc.PostMintResponse](
			httpClient,
			baseURL+MintMintProcedure,
			opts...,
		),
		meltQuote: connect_go.NewClient[cashurpc.PostMeltQuoteRequest, cashurpc.PostMeltQuoteResponse](
			httpClient,
			baseURL+MintMeltQuoteProcedure,
			opts...,
		),
		meltQuoteState: connect_go.NewClient[cashurpc.GetQuoteStateRequest, cashurpc.PostMeltQuoteResponse](
			httpClient,
			baseURL+MintMeltQuoteStateProcedure,
			opts...,
		),
		melt: connect_go.NewClient[cashurpc.PostMeltRequest, cashurpc.PostMeltResponse](
			httpClient,
			baseURL+MintMeltProcedure,
			opts...,
		),
		info: connect_go.NewClient[cashurpc.InfoRequest, cashurpc.InfoResponse](
			httpClient,
			baseURL+MintInfoProcedure,
			opts...,
		),
		checkState: connect_go.NewClient[cashurpc.PostCheckStateRequest, cashurpc.PostCheckStateResponse](
			httpClient,
			baseURL+MintCheckStateProcedure,
			opts...,
		),
	}
}

// mintClient implements MintClient.
type mintClient struct {
	keys           *connect_go.Client[cashurpc.KeysRequest, cashurpc.KeysResponse]
	keySets        *connect_go.Client[cashurpc.KeysRequest, cashurpc.KeysResponse]
	swap           *connect_go.Client[cashurpc.SwapRequest, cashurpc.SwapResponse]
	mintQuote      *connect_go.Client[cashurpc.PostMintQuoteRequest, cashurpc.PostMintQuoteResponse]
	mintQuoteState *connect_go.Client[cashurpc.GetQuoteStateRequest, cashurpc.PostMintQuoteResponse]
	mint           *connect_go.Client[cashurpc.PostMintRequest, cashurpc.PostMintResponse]
	meltQuote      *connect_go.Client[cashurpc.PostMeltQuoteRequest, cashurpc.PostMeltQuoteResponse]
	meltQuoteState *connect_go.Client[cashurpc.GetQuoteStateRequest, cashurpc.PostMeltQuoteResponse]
	melt           *connect_go.Client[cashurpc.PostMeltRequest, cashurpc.PostMeltResponse]
	info           *connect_go.Client[cashurpc.InfoRequest, cashurpc.InfoResponse]
	checkState     *connect_go.Client[cashurpc.PostCheckStateRequest, cashurpc.PostCheckStateResponse]
}

// Keys calls cashu.v1.Mint.Keys.
func (c *mintClient) Keys(ctx context.Context, req *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error) {
	return c.keys.CallUnary(ctx, req)
}

// KeySets calls cashu.v1.Mint.KeySets.
func (c *mintClient) KeySets(ctx context.Context, req *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error) {
	return c.keySets.CallUnary(ctx, req)
}

// Swap calls cashu.v1.Mint.Swap.
func (c *mintClient) Swap(ctx context.Context, req *connect_go.Request[cashurpc.SwapRequest]) (*connect_go.Response[cashurpc.SwapResponse], error) {
	return c.swap.CallUnary(ctx, req)
}

// MintQuote calls cashu.v1.Mint.MintQuote.
func (c *mintClient) MintQuote(ctx context.Context, req *connect_go.Request[cashurpc.PostMintQuoteRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error) {
	return c.mintQuote.CallUnary(ctx, req)
}

// MintQuoteState calls cashu.v1.Mint.MintQuoteState.
func (c *mintClient) MintQuoteState(ctx context.Context, req *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error) {
	return c.mintQuoteState.CallUnary(ctx, req)
}

// Mint calls cashu.v1.Mint.Mint.
func (c *mintClient) Mint(ctx context.Context, req *connect_go.Request[cashurpc.PostMintRequest]) (*connect_go.Response[cashurpc.PostMintResponse], error) {
	return c.mint.CallUnary(ctx, req)
}

// MeltQuote calls cashu.v1.Mint.MeltQuote.
func (c *mintClient) MeltQuote(ctx context.Context, req *connect_go.Request[cashurpc.PostMeltQuoteRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error) {
	return c.meltQuote.CallUnary(ctx, req)
}

// MeltQuoteState calls cashu.v1.Mint.MeltQuoteState.
func (c *mintClient) MeltQuoteState(ctx context.Context, req *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error) {
	return c.meltQuoteState.CallUnary(ctx, req)
}

// Melt calls cashu.v1.Mint.Melt.
func (c *mintClient) Melt(ctx context.Context, req *connect_go.Request[cashurpc.PostMeltRequest]) (*connect_go.Response[cashurpc.PostMeltResponse], error) {
	return c.melt.CallUnary(ctx, req)
}

// Info calls cashu.v1.Mint.Info.
func (c *mintClient) Info(ctx context.Context, req *connect_go.Request[cashurpc.InfoRequest]) (*connect_go.Response[cashurpc.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// CheckState calls cashu.v1.Mint.CheckState.
func (c *mintClient) CheckState(ctx context.Context, req *connect_go.Request[cashurpc.PostCheckStateRequest]) (*connect_go.Response[cashurpc.PostCheckStateResponse], error) {
	return c.checkState.CallUnary(ctx, req)
}

// MintHandler is an implementation of the cashu.v1.Mint service.
type MintHandler interface {
	// Starting https://github.com/cashubtc/nuts/blob/main/01.md
	Keys(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/02.md
	KeySets(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/03.md
	Swap(context.Context, *connect_go.Request[cashurpc.SwapRequest]) (*connect_go.Response[cashurpc.SwapResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MintQuote(context.Context, *connect_go.Request[cashurpc.PostMintQuoteRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error)
	MintQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error)
	Mint(context.Context, *connect_go.Request[cashurpc.PostMintRequest]) (*connect_go.Response[cashurpc.PostMintResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/05.md
	MeltQuote(context.Context, *connect_go.Request[cashurpc.PostMeltQuoteRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error)
	MeltQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error)
	Melt(context.Context, *connect_go.Request[cashurpc.PostMeltRequest]) (*connect_go.Response[cashurpc.PostMeltResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/06.md
	Info(context.Context, *connect_go.Request[cashurpc.InfoRequest]) (*connect_go.Response[cashurpc.InfoResponse], error)
	// Starting https://github.com/cashubtc/nuts/blob/main/07.md
	CheckState(context.Context, *connect_go.Request[cashurpc.PostCheckStateRequest]) (*connect_go.Response[cashurpc.PostCheckStateResponse], error)
}

// NewMintHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMintHandler(svc MintHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MintKeysProcedure, connect_go.NewUnaryHandler(
		MintKeysProcedure,
		svc.Keys,
		opts...,
	))
	mux.Handle(MintKeySetsProcedure, connect_go.NewUnaryHandler(
		MintKeySetsProcedure,
		svc.KeySets,
		opts...,
	))
	mux.Handle(MintSwapProcedure, connect_go.NewUnaryHandler(
		MintSwapProcedure,
		svc.Swap,
		opts...,
	))
	mux.Handle(MintMintQuoteProcedure, connect_go.NewUnaryHandler(
		MintMintQuoteProcedure,
		svc.MintQuote,
		opts...,
	))
	mux.Handle(MintMintQuoteStateProcedure, connect_go.NewUnaryHandler(
		MintMintQuoteStateProcedure,
		svc.MintQuoteState,
		opts...,
	))
	mux.Handle(MintMintProcedure, connect_go.NewUnaryHandler(
		MintMintProcedure,
		svc.Mint,
		opts...,
	))
	mux.Handle(MintMeltQuoteProcedure, connect_go.NewUnaryHandler(
		MintMeltQuoteProcedure,
		svc.MeltQuote,
		opts...,
	))
	mux.Handle(MintMeltQuoteStateProcedure, connect_go.NewUnaryHandler(
		MintMeltQuoteStateProcedure,
		svc.MeltQuoteState,
		opts...,
	))
	mux.Handle(MintMeltProcedure, connect_go.NewUnaryHandler(
		MintMeltProcedure,
		svc.Melt,
		opts...,
	))
	mux.Handle(MintInfoProcedure, connect_go.NewUnaryHandler(
		MintInfoProcedure,
		svc.Info,
		opts...,
	))
	mux.Handle(MintCheckStateProcedure, connect_go.NewUnaryHandler(
		MintCheckStateProcedure,
		svc.CheckState,
		opts...,
	))
	return "/cashu.v1.Mint/", mux
}

// UnimplementedMintHandler returns CodeUnimplemented from all methods.
type UnimplementedMintHandler struct{}

func (UnimplementedMintHandler) Keys(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.Keys is not implemented"))
}

func (UnimplementedMintHandler) KeySets(context.Context, *connect_go.Request[cashurpc.KeysRequest]) (*connect_go.Response[cashurpc.KeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.KeySets is not implemented"))
}

func (UnimplementedMintHandler) Swap(context.Context, *connect_go.Request[cashurpc.SwapRequest]) (*connect_go.Response[cashurpc.SwapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.Swap is not implemented"))
}

func (UnimplementedMintHandler) MintQuote(context.Context, *connect_go.Request[cashurpc.PostMintQuoteRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.MintQuote is not implemented"))
}

func (UnimplementedMintHandler) MintQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMintQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.MintQuoteState is not implemented"))
}

func (UnimplementedMintHandler) Mint(context.Context, *connect_go.Request[cashurpc.PostMintRequest]) (*connect_go.Response[cashurpc.PostMintResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.Mint is not implemented"))
}

func (UnimplementedMintHandler) MeltQuote(context.Context, *connect_go.Request[cashurpc.PostMeltQuoteRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.MeltQuote is not implemented"))
}

func (UnimplementedMintHandler) MeltQuoteState(context.Context, *connect_go.Request[cashurpc.GetQuoteStateRequest]) (*connect_go.Response[cashurpc.PostMeltQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.MeltQuoteState is not implemented"))
}

func (UnimplementedMintHandler) Melt(context.Context, *connect_go.Request[cashurpc.PostMeltRequest]) (*connect_go.Response[cashurpc.PostMeltResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.Melt is not implemented"))
}

func (UnimplementedMintHandler) Info(context.Context, *connect_go.Request[cashurpc.InfoRequest]) (*connect_go.Response[cashurpc.InfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.Info is not implemented"))
}

func (UnimplementedMintHandler) CheckState(context.Context, *connect_go.Request[cashurpc.PostCheckStateRequest]) (*connect_go.Response[cashurpc.PostCheckStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cashu.v1.Mint.CheckState is not implemented"))
}
